# -*- coding: utf-8 -*-
"""
Django settings for corpora project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = eval(os.environ['DJANGO_ISNOT_PRODUCTION'])

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'corpora',
    'corpus',
    'people',

    'storages',
    'djangobower',

    'sekizai',
    'compressor',
    'sass_processor',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    #'django.middleware.cache.UpdateCacheMiddleware', # <= for caching entire site
    'django.middleware.locale.LocaleMiddleware',
    'corpora.middleware.LanguageMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.cache.FetchFromCacheMiddleware', # <= for caching entire site
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'corpora.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'sekizai.context_processors.sekizai',
            ],
        },
    },
]

WSGI_APPLICATION = 'corpora.wsgi.application'


# STORAGES #
DEFAULT_FILE_STORAGE =      os.environ['FILE_STORAGE']
AWS_ACCESS_KEY_ID =         os.environ['AWS_ID']
AWS_SECRET_ACCESS_KEY =     os.environ['AWS_SECRET']
AWS_STORAGE_BUCKET_NAME =   os.environ['AWS_BUCKET']
AWS_QUERYSTRING_AUTH = False



# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
# We use ansible to create the environment variables to use.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['DATABASE_NAME'], # TODO: Give this a better name?
        'USER': os.environ['DATABASE_USER'],
        'PASSWORD': os.environ['DATABASE_PASSWORD'], # TODO: Secure this!
        'HOST': os.environ['DATABASE_HOST'],           
        'PORT': '5432',
        }
    }

# All auth
AUTHENTICATION_BACKENDS = (
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    
)

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Site ID
SITE_ID = 1


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en_NZ'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Add support for IMPORTANT!!!!! languages
import django.conf.locale
EXTRA_LANG_INFO = {
    'mi': {
        'bidi': False, # right-to-left
        'code': 'mi',
        'name': 'Maori',
        'name_local': u'Māori',
    },
    'en_NZ': {
        'bidi': False, # right-to-left
        'code': 'en_NZ',
        'name': 'New Zealand English',
        'name_local': u'New Zealand English',
    },
}
LANG_INFO = dict(django.conf.locale.LANG_INFO.items() + EXTRA_LANG_INFO.items())
 
# update the language info
django.conf.locale.LANG_INFO = LANG_INFO

from django.utils.translation import ugettext_lazy as _
LANGUAGES = (
    ('en',    _('English')),
    ('en_NZ', _('New Zealand English')),
    ('mi',    _('Maori'))
)
# LANGUAGE_COOKIE_NAME='corpora-language'

# LOCALE_PATHS = (
# We're making a local directory in each app and the project-app folder
#     os.path.join(BASE_DIR, 'locale'),
# )

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.environ['STATIC_PATH'] #os.path.join(BASE_DIR, 'public', 'static')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.environ['MEDIA_PATH']

BOWER_COMPONENTS_ROOT = os.path.join(BASE_DIR, 'corpora/static')

BOWER_INSTALLED_APPS = {
    'jquery',
    'bootstrap'
}

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, '...', 'static'),
# )

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'django.contrib.staticfiles.finders.FileSystemFinder',

    # Additional finders
    'compressor.finders.CompressorFinder',
    'sass_processor.finders.CssFinder',
    'djangobower.finders.BowerFinder',
)

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': '%s:%s'%(os.environ['DJANGO_MEMCACHED_IP'], os.environ['DJANGO_MEMCACHED_PORT']),
        'TIMEOUT': 300,
    }
}

# These may be required if caching the entire site.
# CACHE_MIDDLEWARE_ALIAS 
# CACHE_MIDDLEWARE_SECONDS
# CACHE_MIDDLEWARE_KEY_PREFIX


import sys


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s -- %(message)s'
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose',
        },
        'testconsole': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '../../logs/django.log',
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 10,  # 10 mb                        
        },      
        'celery': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '../../logs/celery.log',
            'formatter': 'simple',
            'maxBytes': 1024 * 1024 * 10,  # 10 mb            
        }
    },
    'loggers': {
        'django.test':{
            'handlers': ['testconsole'],
            'level': 'DEBUG',
            'propogate': True        
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'corpora': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propogate': True
        },
        'celery': {
            'handlers': ['celery', 'console'],
            'level': 'DEBUG',
            'propogate': True
        }
    }
}


